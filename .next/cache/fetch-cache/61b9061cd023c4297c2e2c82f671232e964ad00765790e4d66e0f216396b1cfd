{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","access-control-allow-headers":"Content-Type, Authorization","access-control-allow-methods":"GET, POST, PUT, DELETE, OPTIONS","access-control-allow-origin":"*","alt-svc":"h3=\":443\"; ma=2592000, h3-29=\":443\"; ma=2592000, h3-Q050=\":443\"; ma=2592000, h3-Q046=\":443\"; ma=2592000, h3-Q043=\":443\"; ma=2592000, quic=\":443\"; ma=2592000; v=\"43,46\"","cache-control":"no-cache, no-store, must-revalidate","connection":"Keep-Alive","content-encoding":"br","content-length":"14011","content-security-policy":"upgrade-insecure-requests","content-type":"application/json","date":"Wed, 25 Dec 2024 08:38:31 GMT","etag":"\"1dd4e-676b6761-38448b128a26d3f1;br\"","expires":"0","keep-alive":"timeout=5, max=100","last-modified":"Wed, 25 Dec 2024 02:01:05 GMT","panel":"hpanel","platform":"hostinger","pragma":"no-cache","server":"LiteSpeed","vary":"Accept-Encoding"},"body":"{
  "home": [
    {
      "homeSeoData": {
        "title": "Paper Food Packaging Machine Manufacturers | Nessco",
        "description": "As the world's leading provider of paper beverage and food packaging machine, Nessco offer best solutions tailored to meet the unique needs for disposable industry.",
        "openGraph": {
          "title": "Paper Food Packaging Machine Manufacturers | Nessco",
          "type": "website",
          "description": "As the world's leading provider of paper beverage and food packaging machine, Nessco offer best solutions tailored to meet the unique needs for disposable industry."
        },
        "twitter": {
          "title": "Paper Food Packaging Machine Manufacturers | Nessco",
          "description": "As the world's leading provider of paper beverage and food packaging machine, Nessco offer best solutions tailored to meet the unique needs for disposable industry."
        }
      },
      "homeMachineSection": {
        "title": "Our Products",
        "subheading": "We are known for manufacturing and globally exporting various paper packaging machines including Cups, Glass, Straws and Plate Machines."
      },
      "navItems": [
        {
          "text": "Announcements",
          "ref": "homeMachineRef"
        },
        {
          "text": "Our Products",
          "ref": "aboutUsRef"
        },
        {
          "text": "About Us",
          "ref": "infiniteCardsRef"
        },
        {
          "text": "Clientele",
          "ref": "knowMoreRef"
        },
        {
          "text": "IOT",
          "ref": "iotRef"
        },
        {
          "text": "Our Expertise",
          "ref": "ourexpertiseRef"
        },
        {
          "text": "News",
          "ref": "newsFeatureRef"
        },
        {
          "text": "Testimonials",
          "ref": "homeTestimonialRef"
        }
      ]
    },
    {
      "category": "HeroSection",
      "data": {
        "video": {
          "sources": [
            {
              "src": "https://assets.nesscoindustries.com/public/assets/homepage/home-banner-1.webm",
              "type": "video/webm",
              "headline": "Smart Solutions for Modern",
              "subheadline": "Food Packaging"
            }
          ],
          "poster": "https://www.nesscoindia.com/Assets/images/resource/fully-automatic-paper-cup-making-machine.webp"
        },
        "image": [
          {
            "src": "https://res.cloudinary.com/dj4jijw2a/image/upload/v1728902747/webphome_1_optimized_10_mvqf3i.avif",
            "headline": "1Quality Food Packaging",
            "subheadline": "Machinery & Solutions"
          },
          {
            "src": "https://www.nesscoindia.com/Assets/images/resource/fully-automatic-paper-cup-making-machine.webp",
            "headline": "2Quality Food Packaging",
            "subheadline": "Machinery & Solutions"
          },
          {
            "src": "https://www.nesscoindia.com/Assets/images/resource/fully-automatic-paper-cup-making-machine.webp",
            "headline": "3Quality Food Packaging",
            "subheadline": "Machinery & Solutions"
          },
          {
            "src": "https://www.nesscoindia.com/Assets/images/resource/fully-automatic-paper-cup-making-machine.webp",
            "headline": "4Quality Food Packaging",
            "subheadline": "Machinery & Solutions"
          }
        ],
        "textOverlay": {
          "headline": "Quality Food Packaging",
          "subheadline": "Machinery & Solutions"
        },
        "buttonText": "Get a quote"
      }
    },
    {
      "category": "ProductSection",
      "data": {
        "products": [
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-160S",
            "firstLink": "ns-160s",
            "secondname": "Paper Cup Machine",
            "secondLink": "paper-cup-machine",
            "description": "The NS-160S Paper Cup Machine is a high-speed production unit capable of operating at 180 meters per minute. This machine utilizes a servo mechanism for precise control and efficiency, ensuring consistent quality in every cup produced. It is designed to create cups with a size of 135 mm, making it suitable for various applications, including hot and cold beverages. With its advanced technology and reliable performance, this machine is an excellent choice for manufacturers looking to enhance their production capabilities in the competitive packaging market.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-160s.webp",
            "title": "NS-160S Paper Cup Machine",
            "speed": "180",
            "unit": "PCS/MIN",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-200 ",
            "firstLink": "ns-200",
            "secondname": "Paper Cup Machine ",
            "secondLink": "paper-cup-machine",
            "description": "The NS-200 Paper Cup Machine, with its Cam-Based Technology and chain-driven design, is perfect for making medium-sized cups. These cups are ideal for cafés, restaurants, catering, and other food services, suitable for both hot drinks like coffee and tea, as well as cold drinks like iced tea and soft drinks. This machine works fast, making 120 cups per minute, making it a great choice for busy settings.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-200.webp",
            "title": "NS-200 Paper Cup Machine ",
            "speed": "120",
            "unit": "PCS/MIN",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-D3500",
            "firstLink": "ns-d3500",
            "secondname": "Paper Cup Machine",
            "secondLink": "paper-cup-machine",
            "description": "The NS-D3500 Paper Cup Machine is engineered for high-speed production, delivering up to 130 cups per minute. It features a Double Curling system, ensuring smooth and precise cup edges for enhanced durability and user comfort. The machine's automatic lubrication system and gear drive mechanism contribute to its stability and consistent performance.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-d3500.webp",
            "title": "NS-D3500 Paper Cup Machine",
            "speed": "130",
            "unit": "PCS/MIN",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-2200-D",
            "firstLink": "ns-2200-d",
            "secondname": "Paper Cup Machine",
            "secondLink": "paper-cup-machine",
            "description": "The NS-2200-D Paper Cup Machine is designed for high-speed production, creating up to 110 cups per minute. Its double curling mechanism ensures smooth and durable cup rims for added comfort. Perfect for large beverages, these cups are ideal for theaters, upscale coffee shops, and fast-casual dining establishments. This versatility makes them a great choice for any business looking to enhance their drink offerings.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-2200-d.webp",
            "title": "NS-2200-D Paper Cup Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-2010-T",
            "firstLink": "ns-2010-t",
            "secondname": "Paper Cup Machine",
            "secondLink": "paper-cup-machine",
            "description": "The NS-2010-T Paper Cup Machine is a high-speed, fully automatic solution designed for efficient production of paper cups. Capable of producing up to 110 cups per minute, it accommodates a range of sizes from 3oz to 22oz, making it versatile for various applications. The machine supports paper specifications between 190-400 gsm and operates with a general power requirement of 12 KW. Its robust construction ensures durability and consistent performance.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-2010-t.webp",
            "title": "NS-2010-T Paper Cup Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-2020",
            "firstLink": "ns-2020",
            "secondname": "Paper Cup Machine",
            "secondLink": "paper-cup-machine",
            "description": "The NS-2020 Paper Cup Machine offers a fully automated and rapid solution for producing disposable paper cups. It can efficiently create up to 120 cups every minute and supports a variety of sizes, ranging from 35 ml to 450 ml. These disposable cups are perfect for food service operations, including cafes, restaurants, and catering businesses, that want to enhance their efficiency in production. ",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-2020.webp",
            "title": "NS-2020 Paper Cup Machine",
            "speed": "120",
            "unit": "PCS/MIN",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper box machines",
            "firstname": "NS-EC50",
            "firstLink": "ns-ec50",
            "secondname": "Carton Erecting Machine",
            "secondLink": "paper-box-machine",
            "description": "The NS-CR Carton Erecting Machine is an automated machine designed to form flat cardboard sheets into boxes at a speed of 100 pieces per minute. This machine takes flat carton blanks and folds, seals, and shapes them into ready-to-fill cartons, which are widely used in various industries for packaging products such as food, beverages, and consumer goods. By automating the carton erecting process, this machine significantly improves production efficiency and reduces labor costs, making it an essential tool for businesses looking to streamline their packaging operations.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-ec50.webp",
            "title": "NS-EC50 Carton Erecting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/carton-erecting.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-G2200",
            "firstLink": "ns-g2200",
            "secondname": "Paper Cup Machine",
            "secondLink": "paper-cup-machine",
            "description": "The NS-G2200 Paper Cup Machine is an advanced and effective option for producing disposable paper cups. One of its best features is the gear system, which allows it to run faster than regular machines, this allows it to run at speeds of up to 100 cups per minute. Also, this machine is made for larger 22oz cups, making it perfect for businesses that need to produce big and strong cups quickly.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-g2200.webp",
            "title": "NS-G2200 Paper Cup Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cup machines",
            "firstname": "NS-160C",
            "firstLink": "ns-160c",
            "secondname": "Paper Cup Machine",
            "secondLink": "paper-cup-machine",
            "description": "The NS-160C Paper Cup Machine is a high-speed solution designed for efficiently producing disposable paper cups. Featuring the latest Cam technology, this machine operates at impressive speeds of up to 160 cups per minute, making it one of the fastest options available. It is specifically designed to produce standard paper cups commonly used in grocery stores, cafes, and tea shops, ensuring that businesses can meet their demand for quality disposable products.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-160c.webp",
            "title": "NS-160C Paper Cup Machine",
            "speed": "160",
            "unit": "PCS/MIN",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-2900",
            "firstLink": "ns-2900",
            "secondname": "Paper Bowl Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-2900 Paper Bowl Container Machine is a state-of-the-art solution for producing disposable paper bowls, achieving an impressive speed of 75 bowls per minute. This machine employs an efficient mold system to convert paper into durable bowl shapes, making it ideal for serving soups, salads, and ice creams. Commonly used in grocery stores, cafes, and ice cream shops.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-2900.webp",
            "title": "NS-2900 Paper Bowl Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-B3000",
            "firstLink": "ns-b3000",
            "secondname": "Paper Bowl Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-B3000 High-Speed Paper Bowl Container Machine is designed for quickly making disposable paper bowls, reaching an impressive speed of 90 bowls per minute. This machine is perfect for producing bowls used for soups, ice creams, and other food items, making it a great choice for restaurants, cafés, and food service businesses. With its advanced technology, the NS-B3000 ensures that every bowl is made with consistent quality and strength, ",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-b3000.webp",
            "title": "NS-B3000 Paper Bowl Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-160B",
            "firstLink": "ns-160b",
            "secondname": "Paper Bowl Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-160B High-Speed Paper Bowl Machine is designed for efficiently producing disposable paper bowls at an impressive speed of 130 bowls per minute. This machine is perfect for the Horeca industry, as it efficiently produces bowls suitable for soups, ice creams, and a variety of other food items, making it an excellent choice for restaurants and food service businesses. A notable feature of the NS-160B is its double curling system, which enhances the strength and quality of the bowls. ",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-160b.webp",
            "title": "NS-160B Paper Bowl Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-HSB1800",
            "firstLink": "ns-hsb1800",
            "secondname": "Paper Bowl Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-HSB1800 High Bowl Machine is designed for efficiently producing paper bowls at a speed of 70 bowls per minute. This machine specializes in creating bowls with a size of 180 mm, which are commonly used in various markets, including restaurants, catering services, and food delivery businesses. These bowls are ideal for serving larger portions of soups, salads, and desserts, making them perfect for events and takeout orders.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-hsb1800.webp",
            "title": "NS-HSB1800 High Bowl Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-SB1500",
            "firstLink": "ns-sb1500",
            "secondname": "Salad Bowl Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-SB1500 Salad Bowl Machine is designed for producing high-quality paper bowls at a speed of 75 bowls per minute. This machine specializes in creating bowls with a diameter of 115 mm, which are commonly used in various markets, including salad bars, catering services, and fast-food restaurants. These bowls are perfect for serving salads, snacks, and small portions of side dishes, making them an excellent choice for food vendors and takeout establishments",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-sb1500.webp",
            "title": "NS-SB1500 Salad Bowl Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-BH220",
            "firstLink": "ns-bh220",
            "secondname": "Pop Corn Tub Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-BH220 Pop Corn Tub Machine is designed for producing high-quality popcorn tubs at a speed of 70 tubs per minute. This machine specializes in creating tubs with a size of 210 mm, making it ideal for various markets such as cinemas, amusement parks, and concession stands. The larger size is perfect for serving generous portions of popcorn, making it a popular choice for moviegoers and event attendees. Additionally, the NS-BH220 utilizes a gear mechanism, ensuring smooth and efficient operation during production",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-bh220.webp",
            "title": "NS-BH220 Pop Corn Tub Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bag machines",
            "firstname": "NS-PB330A",
            "firstLink": "ns-pb330a",
            "secondname": "Paper Bag Machine",
            "secondLink": "paper-bag-machine",
            "description": "The NS-PB330A Paper Bag Machine is a fully automatic machine designed for the forming of paper bags and attaches twisted rope handles at a fast speed of 135 bags per minute. This machine is ideal for stores, grocery shops, and restaurants that need strong and reliable packaging. The twisted rope handles provide a comfortable grip for customers, enhancing the usability of the bags. This machine also produces bags with square bottom designs, offering versatile options for various products.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-pb330a.webp",
            "title": "NS-PB330A Paper Bag Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bag-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bag machines",
            "firstname": "NS-PB450A",
            "firstLink": "ns-pb450a",
            "secondname": "Paper Bag Machine",
            "secondLink": "paper-bag-machine",
            "description": "The NS-PB450A Paper Bag Machine is designed to produce paper bags with a width of 450 mm at a speed of 100 bags per minute. This size of bag is commonly used in various markets, including retail stores, supermarkets, and bakeries. The larger width makes it ideal for carrying bulk items such as groceries, clothing, and baked goods. By using this machine, businesses can efficiently meet the demand for eco-friendly paper bags while ensuring their products are packaged securely and attractively.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-pb450a.webp",
            "title": "NS-PB450A Paper Bag Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bag-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bag machines",
            "firstname": "NS-PBRM",
            "firstLink": "ns-pbrm",
            "secondname": "Rope Making Machine",
            "secondLink": "paper-bag-machine",
            "description": "The NS-PBRM Rope Making Machine is a specialized sub-machine designed for producing twisted rope used in paper bags, operating at a speed of 60 pieces per minute. This machine can handle a maximum paper roll diameter of 450 mm, making it efficient for large-scale production. The twisted rope is commonly used in various markets, such as retail stores, grocery shops, and packaging companies, where strong and durable handles are needed for paper bags",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-pbrm.webp",
            "title": "NS-PBRM Rope Making Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bag-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bag machines",
            "firstname": "NS-PBRW",
            "firstLink": "ns-pbrw",
            "secondname": "Rope Winding Machine",
            "secondLink": "paper-bag-machine",
            "description": "The NS-PBRW Rope Winding Machine is designed to specifically wind twisted rope, ensuring that it is wrapped perfectly without any tangles, operating at an impressive speed of 150 pieces per minute. This machine can handle rope diameters ranging from 2 to 4 mm, making it ideal for creating strong and durable handles for various types of paper bags.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-pbrw.webp",
            "title": "NS-PBRW Rope Winding Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bag-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High-Speed Synchronized Servos"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Advanced Sealing Technology"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Two-Step Curling Process"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Comprehensive Control System"
              }
            ]
          },
          {
            "category": "All paper Products,Paper plate machines",
            "firstname": "NS-PPM300",
            "firstLink": "ns-ppm300",
            "secondname": "Paper Plate Machine",
            "secondLink": "paper-plate-machine",
            "description": "The NS-PPM300 Paper Plate Machine is designed to produce paper plates at a speed of 120 plates per minute, with sizes ranging from 5 to 12.5 inches. These plates are commonly used in various markets, including catering services, outdoor events, and food festivals, where disposable tableware is needed. The versatile size makes them suitable for serving a variety of foods, such as appetizers, main courses, and desserts. ",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-ppm300.webp",
            "title": "NS-PPM300 Paper Plate Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-plate-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper straw machines",
            "firstname": "NS-PS6",
            "firstLink": "ns-ps6",
            "secondname": "Paper Straw Machine",
            "secondLink": "paper-straw-machine",
            "description": "The NS-PS6 Paper Straw Machine is designed to produce paper straws at a speed of 60 straws per minute and comes equipped with 6 cutters for efficient production. These straws are commonly used in various markets, such as restaurants, cafés, and bars, where they serve as eco-friendly alternatives to plastic straws. They are ideal for serving beverages like smoothies, juices, and cocktails, making them popular in food service settings that prioritize sustainability.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-ps6.webp",
            "title": "NS-PS6 Paper Straw Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-straw-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper straw machines",
            "firstname": "NS-PS9",
            "firstLink": "ns-ps9",
            "secondname": "Paper Straw Machine",
            "secondLink": "paper-straw-machine",
            "description": "The NS-PS9 Paper Straw Machine is a modern machine that produces paper straws at a fast rate of 120 straws per minute. It has 9 cutters that help make different sizes of straws efficiently. These paper straws are commonly used in places like restaurants, cafés, and bars as a better choice than plastic straws. They are strong and perfect for various drinks, including smoothies, juices, and cocktails. This machine is also great for parties and events, where it offers a stylish and eco-friendly option for guests. By using this machine, businesses can meet the rising demand for sustainable drinking solutions while helping to reduce plastic waste.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-ps9.webp",
            "title": "NS-PS9 Paper Straw Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-straw-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Slitting machines",
            "firstname": "NS-SLT450",
            "firstLink": "ns-slt450",
            "secondname": "Slitting Machine",
            "secondLink": "slitting-machine",
            "description": "The NS-SLT450 Paper Straw Slitting Machine is an important sub-machine used in making paper straws, producing 120 straws per minute. This machine cuts and shapes paper into different straw sizes, helping manufacturers meet the growing need for eco-friendly options in the drink industry. Its precise cutting ensures high-quality straws that are perfect for a variety of beverages, from smoothies to cocktails",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-slt450.webp",
            "title": "NS-SLT450 Slitting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/slitting-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper straw machines",
            "firstname": "NS-PSPKS",
            "firstLink": "ns-pspks",
            "secondname": "Single Straw Packing Machine With Printing",
            "secondLink": "paper-straw-machine",
            "description": "The NS-PSPKS Single Straw Packing Machine with Printing is an important sub-machine that helps package paper straws quickly and efficiently, producing 300 straws per minute. This machine makes it easy to pack straws neatly for distribution. It also has printing features, allowing businesses to add their brand name or product details directly on the packaging, which helps with marketing.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-pspks.webp",
            "title": "NS-PSPKS Single Straw Packing Machine With Printing",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-straw-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper straw machines",
            "firstname": "NS-PSBD",
            "firstLink": "ns-psbd",
            "secondname": "Paper Straw Bending Machine",
            "secondLink": "paper-straw-machine",
            "description": "The NS-PSBD Paper Straw Bending Machine is a vital sub-machine in the production line for paper straws, capable of producing 250 straws per minute. This machine is designed to bend paper straws into various shapes, allowing it to create popular types like U-shaped and bendy straws. Its high-speed performance makes it an excellent choice for manufacturers looking to increase their output and meet customer needs. ",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-psbd.webp",
            "title": "NS-PSBD Paper Straw Bending Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-straw-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper straw machines",
            "firstname": "NS-PSBC",
            "firstLink": "ns-psbc",
            "secondname": "Paper Straw Sharp Bevel Cutting Machine",
            "secondLink": "paper-straw-machine",
            "description": "The NS-PSBC Paper Straw Sharp Bevel Cutting Machine is an essential sub-machine in the production line for paper straws, capable of producing 800 straws per minute. This machine is designed to create sharp, angled cuts at the ends of paper straws, ensuring they are ready for use in various beverages. Its high-speed operation allows manufacturers to efficiently produce straws that meet the growing demand for eco-friendly alternatives to plastic.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-psbc.webp",
            "title": "NS-PSBC Paper Straw Sharp Bevel Cutting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-straw-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper straw machines",
            "firstname": "NS-TPK",
            "firstLink": "ns-tpk",
            "secondname": "Paper Straw U Shape Packing Machine",
            "secondLink": "paper-straw-machine",
            "description": "The NS-TPK Paper Straw U-Shape Packing Machine is a high-speed auxiliary machine designed for paper straw manufacturing, capable of producing up to 600 pieces per minute. This machine ensures precise operation, hygienic packaging, and consistent quality, making it an ideal solution for large-scale production in modern beverage packaging industries. It automates the packing process, allowing for efficient handling and organization of U-shaped paper straws, which are commonly used for various drinks. ",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-tpk.webp",
            "title": "NS-TPK Paper Straw U Shape Packing Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-straw-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper lid machines",
            "firstname": "NS-LID H",
            "firstLink": "ns-lid-h",
            "secondname": "Paper Lid Machine",
            "secondLink": "paper-lid-machine",
            "description": "The NS-LID H Paper Lid Machine is a specialized sub-machine designed for producing lids for bowls and cups, capable of producing 70 pieces per minute. This machine efficiently shapes and cuts paper into precise lid designs, ensuring a perfect fit for various containers, and it uses a three-layer mechanism to enhance its efficiency and the quality of the lids produced. It also allows for branding by adding logos, making it a valuable tool for businesses to improve their product presentation.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-lid-h.webp",
            "title": "NS-LID H Paper Lid Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-lid2.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper lid machines",
            "firstname": "NS-LID D",
            "firstLink": "ns-lid-d",
            "secondname": "Paper Lid Machine",
            "secondLink": "paper-lid-machine",
            "description": "The NS-LID D Paper Dome Lid Machine is a special machine that makes dome lids at a speed of 70 pieces per minute. This machine shapes and forms paper into dome lids that are often used for coffee cups, ice cream bowls, and takeout containers. The dome shape gives the containers a nice appearance, making them more attractive to customers while also being practical for use. By using this machine, businesses can improve their packaging while also being environmentally friendly with paper materials.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-lid-d.webp",
            "title": "NS-LID D Paper Dome Lid Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-lid2.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper box machines",
            "firstname": "NS-CR",
            "firstLink": "ns-cr",
            "secondname": "Carton Erecting Machine",
            "secondLink": "paper-box-machine",
            "description": "The NS-CR Carton Erecting Machine is an automated machine designed to form flat cardboard sheets into boxes at a speed of 100 pieces per minute. This machine takes flat carton blanks and folds, seals, and shapes them into ready-to-fill cartons, which are widely used in various industries for packaging products such as food, beverages, and consumer goods. By automating the carton erecting process, this machine significantly improves production efficiency and reduces labor costs, making it an essential tool for businesses looking to streamline their packaging operations.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-cr.webp",
            "title": "NS-CR Carton Erecting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/carton-erecting.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper box machines",
            "firstname": "NS-CRF ",
            "firstLink": "ns-crf ",
            "secondname": "Carton Erecting Machine",
            "secondLink": "paper-box-machine",
            "description": "The NS-CRF Carton Erecting Machine is an advanced automated machine designed to efficiently form flat cardboard sheets into boxes at a speed of 160 pieces per minute. This machine utilizes a four servo mechanism, which enhances its precision and reliability during operation. It is widely used in various industries for packaging products such as food, beverages, and consumer goods, ensuring that cartons are quickly and accurately erected for filling.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-crf.webp",
            "title": "NS-CRF Carton Erecting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/carton-erecting.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper box machines",
            "firstname": "NS-LB50",
            "firstLink": "ns-lb50",
            "secondname": "Lunch Box Machine",
            "secondLink": "paper-box-machine",
            "description": "The NS-LB50 Lunch Box Machine is an efficient machine designed to produce lunch boxes at a speed of 45 pieces per minute. This machine is designed for the food industry, creating disposable lunch boxes that are perfect for takeout meals, catering services, and school lunches. By automating the production process, it helps businesses meet the growing demand for convenient and eco-friendly packaging solutions.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-lb50.webp",
            "title": "NS-LB50 Lunch Box Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/carton-erecting.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Die cutting machines",
            "firstname": "NS-970",
            "firstLink": "ns-970",
            "secondname": "Wooden Roll Die Cutting Machine",
            "secondLink": "paper-die-cutting-machine",
            "description": "The NS-970 Wooden Roll Die Cutting Machine is a highly efficient device designed to cut paper into various shapes at a speed of 220 punches per minute. This machine utilizes a wooden die for precise shaping of paper, making it versatile for applications such as packaging, crafts, and stationery production. Its accuracy in cutting ensures each piece is crafted to exact specifications, making it a perfect choice for manufacturers aiming to produce premium-quality products efficiently.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-970.webp",
            "title": "NS-970 Wooden Roll Die Cutting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/die-cutting(2).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Die cutting machines",
            "firstname": "NS-970E",
            "firstLink": "ns-970e",
            "secondname": "Wooden Roll Die Cutting Machine With Embossing",
            "secondLink": "paper-die-cutting-machine",
            "description": "The NS-970E Wooden Roll Die Cutting Machine is a high-performance device designed to cut paper into various shapes at a speed of 220 punches per minute. This machine utilizes a wooden die for precise cutting and also implements an embossing mechanism, allowing it to create detailed designs and textures on the paper. By combining cutting and embossing capabilities, this machine enhances the versatility of production, making it an essential tool for manufacturers looking to deliver high-quality, visually appealing products efficiently.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-970e.webp",
            "title": "NS-970E Wooden Roll Die Cutting Machine With Embossing",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/die-cutting(2).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Die cutting machines",
            "firstname": "NS-1200",
            "firstLink": "ns-1200",
            "secondname": "Wooden Roll Die Cutting Machine",
            "secondLink": "paper-die-cutting-machine",
            "description": "The NS-1200 Wooden Roll Die Cutting Machine is a powerful machine that can produce 220 punches per minute It uses a large die that measures 1200 x 640 mm, which allows it to cut paper efficiently. The maximum cutting size for the paper is 1170 x 660 mm, making this machine suitable for creating different shapes and designs. It is commonly used in packaging, crafts, and other paper products. With its strong build and precise cutting ability, this machine helps manufacturers work faster while ensuring high-quality results.\r\n",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-1200.webp",
            "title": "NS-1200 Wooden Roll Die Cutting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/die-cutting(2).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Flexo printing machines",
            "firstname": "NS-950",
            "firstLink": "ns-950",
            "secondname": "Flexo printing machines",
            "secondLink": "flexo-printing-machine",
            "description": "The NS-950 Flexo Printing Machine is a high-speed device capable of producing 120 meters per minute. It uses five cylinders to apply color to paper, ensuring vibrant and consistent prints. Designed to work with paper in a vertical format, this machine is ideal for printing on various packaging materials, labels, and other paper products. Its efficient operation and advanced printing technology make it an essential tool for manufacturers looking to enhance their branding and product presentation while maintaining high-quality output.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-950.webp",
            "title": "NS-950 Flexo printing machines",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/flexo-printing(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Flexo printing machines",
            "firstname": "NS-HFS1300",
            "firstLink": "ns-hfs1300",
            "secondname": "Flexo printing machines",
            "secondLink": "flexo-printing-machine",
            "description": "The NS-HFS1300 Flexo Printing Machine is a high-speed printing device that operates at 180 meters per minute. It uses six cylinders to apply color to paper, ensuring vibrant and consistent prints. Designed to work with paper in a horizontal format, this machine is ideal for printing on various packaging materials, labels, and other paper products. Its advanced technology and efficient operation make it a valuable asset for manufacturers looking to enhance their production capabilities while delivering high-quality printed materials.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-hfs1300.webp",
            "title": "NS-HFS1300 Flexo printing machines",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/flexo-printing(3).webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper coating machines",
            "firstname": "NS-EXT1300",
            "firstLink": "ns-ext1300",
            "secondname": "PE Coating Machine",
            "secondLink": "paper-coating-machine",
            "description": "The NS-EXT1300 PE Coating Machine is designed to efficiently apply a polyethylene coating to paper at a speed of 150 meters per minute. This coating is crucial as it provides a protective barrier against moisture and grease, making the paper suitable for various applications, particularly in food packaging. By enhancing the durability and water resistance of the paper, the PE coating ensures that products like cups, containers, and wrappers can withstand daily use without compromising their integrity",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-ext1300.webp",
            "title": "NS-EXT1300 PE Coating Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/pe-coating-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-RB500",
            "firstLink": "ns-rb500",
            "secondname": "Paper Bowl Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-RB500 Paper Bowl Machine is designed to produce 40 bowls per minute, specializing in rectangular flat-bottom bowls. This machine efficiently creates single-compartment bowls, making it ideal for serving a variety of food items such as salads, soups, and snacks. With its reliable construction, it ensures consistent quality and durability in every bowl produced, catering to the growing demand for eco-friendly and convenient food packaging solutions.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-rb500.webp",
            "title": "NS-RB500 Paper Bowl Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper cutlery machines",
            "firstname": "NS-PCTM",
            "firstLink": "ns-pctm",
            "secondname": "Paper Cutlery Machine",
            "secondLink": "paper-cutlery-machine",
            "description": "Paper Cutlery making Machine segregates its functions in three parts; first, Glue layer coating & Lamination & Die cutting part; second, Forming part and last, Glue Sealing & Drying part. With the increasing awareness of health hazards caused from using plastic cutleries lately, Paper Cutlery Machine came into more popularity with its varied utility- Paper Knife Fork And Spoons.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-pctm.webp",
            "title": "NS-PCTM Paper Cutlery Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/cutlery-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Paper bowl machines",
            "firstname": "NS-RBT50",
            "firstLink": "ns-rbt50",
            "secondname": "Paper Bowl Machine",
            "secondLink": "paper-bowl-machine",
            "description": "The NS-RBT50 Paper Bowl Machine is designed to produce 40 bowls per minute, specializing in rectangular flat-bottom bowls with a double compartment. This machine efficiently forms bowls that are perfect for serving different food items separately, making it ideal for applications such as takeout meals and catering. Its reliable performance ensures consistent quality in every bowl produced, catering to the increasing demand for convenient and eco-friendly food packaging solutions. ",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-rbt50.webp",
            "title": "NS-RBT50 Paper Bowl Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Insulating cup machines",
            "firstname": "NS-RWH80",
            "firstLink": "ns-rwh80",
            "secondname": "Ripple Wall Paper Cup Machine",
            "secondLink": "insulating-cup-machine",
            "description": "The NS-RWH80 Ripple Wall Cup Making Machine is a single station machine. This machine has various technologies including open cam technology, gear transmission, and longitudinal axis structure. The automatic lubrication technique reduces the friction among various parts of machine. This machine performs a series of functions starting from multi-row automatic paper feeding.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-rwh80.webp",
            "title": "NS-RWH80 Ripple Wall Cup Making Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/insulated-cup-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Insulating cup machines",
            "firstname": "NS-DWH80",
            "firstLink": "ns-dwh80",
            "secondname": "Ripple Wall Paper Cup Machine",
            "secondLink": "insulating-cup-machine",
            "description": "The NS-DWH80 Double Wall Paper Cup Machine is designed with patented Open Cam Technology. It is capable of producing 80 cups of 4-16 oz every minute. Moreover its single-turn plate technology and its heavy structure ensures lesser noise and vibration. This model comprises of PLC control system and sensor failure detection, which stops machine’s working after detecting a problem. And that helps in reducing maintenance cost and increasing safety measures.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-dwh80.webp",
            "title": " NS-DWH80 Double Wall Paper Cup Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/insulated-cup-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Insulating cup machines",
            "firstname": "NS-DWH100",
            "firstLink": "ns-dwh100",
            "secondname": "Double Wall Paper Cup Machine",
            "secondLink": "insulating-cup-machine",
            "description": "The NS-DWH100 Double Wall Paper Cup Machine is designed with patented Open Cam Technology. It is capable of producing 100 cups of 4-16 oz every minute. Moreover its single-turn plate technology and its heavy structure ensures lesser noise and vibration. This model comprises of PLC control system and sensor failure detection, which stops machine’s working after detecting a problem. And that helps in reducing maintenance cost and increasing safety measures.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-dwh100.webp",
            "title": "NS-DWH100 Double Wall Paper Cup Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/insulated-cup-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Insulating cup machines",
            "firstname": "NS-FG",
            "firstLink": "ns-fg",
            "secondname": "Folder Gluer Machine",
            "secondLink": "insulating-cup-machine",
            "description": "The NS-FG Folder Gluer Machine is a high-performance device designed for efficient folding and gluing of paper products at a remarkable speed of 220 meters per minute. It accommodates paper blanks ranging from 100 to 450 mm in length, making it versatile for various packaging applications. This machine is ideal for producing boxes and cartons, ensuring precise folds and strong adhesive bonds, which are essential for maintaining the integrity of packaging.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-fg.webp",
            "title": "NS-FG Folder Gluer Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/insulated-cup-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Insulating cup machines",
            "firstname": "NS-FGS",
            "firstLink": "ns-fgs",
            "secondname": "Folder Gluer Machine",
            "secondLink": "insulating-cup-machine",
            "description": "The NS-FGS Paper Cup Sleeve Forming Machine is designed to form paper/cardboard sleeves, essential for providing insulation to paper cups commonly used in the beverage industry. This machine executes a series of automated functions including paper feeding, pre-folding, alignment adjustments, and folding, culminating in the conveying of the final product. Utilizing insulated, generally corrugated fluted paper, this machine enhances the functionality of paper cups by adding a layer of insulation that protects users from the heat of the beverage.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-fgs.webp",
            "title": "NS-FGS Paper Cup Sleeve Forming Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/insulated-cup-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Insulating cup machines",
            "firstname": "NS-160D",
            "firstLink": "ns-160d",
            "secondname": "Ripple Wall Paper Cup Machine",
            "secondLink": "insulating-cup-machine",
            "description": "The NS-160D Double Wall Paper Cup Machine is designed with patented Open Cam Technology. It is capable of producing 160 cups of 4-16 oz every minute. Moreover its single-turn plate technology and its heavy structure ensures lesser noise and vibration. This model comprises of PLC control system and sensor failure detection, which stops machine’s working after detecting a problem. And that helps in reducing maintenance cost and increasing safety measures.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-160d.webp",
            "title": "NS-160D Double Wall Paper Cup Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/insulated-cup-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Packing machines",
            "firstname": "NS-LPK",
            "firstLink": "ns-lpk",
            "secondname": "Paper Cup/Bowl Packing Machine",
            "secondLink": "packing-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-lpk.webp",
            "title": "NS-LPK Packing Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/packing-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Slitting machines",
            "firstname": "NS-SLT1300",
            "firstLink": "ns-slt1300",
            "secondname": "Slitting Machine",
            "secondLink": "slitting-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-slt1300.webp",
            "title": "NS-SLT1300 Slitting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/slitting-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Slitting machines",
            "firstname": "NS-SLT650",
            "firstLink": "ns-slt650",
            "secondname": "Slitting Machine",
            "secondLink": "slitting-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-slt650.webp",
            "title": "NS-SLT650 Slitting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/slitting-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Slitting machines",
            "firstname": "NS-SLT1300H",
            "firstLink": "ns-slt1300h",
            "secondname": "Slitting Machine",
            "secondLink": "slitting-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-slt1300h.webp",
            "title": "NS-SLT1300H Slitting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/slitting-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Slitting machines",
            "firstname": "NS-SLT1600",
            "firstLink": "ns-slt1600",
            "secondname": "Slitting Machine",
            "secondLink": "slitting-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-slt1600.webp",
            "title": "NS-SLT1600 Slitting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/slitting-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Slitting machines",
            "firstname": "NS-SLT1600H",
            "firstLink": "ns-slt1600h",
            "secondname": "Slitting Machine",
            "secondLink": "slitting-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-slt1600h.webp",
            "title": "NS-SLT1600H Sliting Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/slitting-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Corrugation machines",
            "firstname": "NS-CRS",
            "firstLink": "ns-crs",
            "secondname": "Corrugation Machine",
            "secondLink": "corrugation-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-crs.webp",
            "title": "NS-CRS Corrugation Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/corrugation-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Aluminium container machines",
            "firstname": "NS-AL40",
            "firstLink": "ns-al40",
            "secondname": "Aluminium Container Machine",
            "secondLink": "aluminium-container-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-al40.webp",
            "title": "NS-AL40 Aluminium Container Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/foil-container-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Aluminium container machines",
            "firstname": "NS-AL63",
            "firstLink": "ns-al63",
            "secondname": "Aluminium Container Machine",
            "secondLink": "aluminium-container-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-al63.webp",
            "title": "NS-AL63 Aluminium Container Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/foil-container-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          },
          {
            "category": "All paper Products,Aluminium container machines",
            "firstname": "NS-AL80",
            "firstLink": "ns-al80",
            "secondname": "Aluminium Container Machine",
            "secondLink": "aluminium-container-machine",
            "description": "This machine is a highly efficient paper cup lid packing system, designed for optimal performance. It features PLC programmable control and servo motor drive, ensuring easy parameter adjustment and user-friendly operation. With stable and precise functionality, it delivers reliable and accurate packaging results.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-al80.webp",
            "title": "NS-AL80 Aluminium Container Machine",
            "icon": "https://assets.nesscoindustries.com/public/assets/homepage/foil-container-logo.webp",
            "items": [
              {
                "className": "text-gray-400 text-3xl",
                "text": "High Production Capacity"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Servo Control System"
              },
              {
                "className": "text-gray-400 text-3xl",
                "text": "Ultrasonic Sealing Technology"
              }
            ]
          }
        ],
        "category": "stepperFilter",
        "stepperFilter": [
          {
            "name": "All paper Products"
          },
          {
            "name": "Paper cup machines"
          },
          {
            "name": "Paper bowl machines"
          },
          {
            "name": "Paper bag machines"
          },
          {
            "name": "Paper plate machines"
          },
          {
            "name": "Paper straw machines"
          },
          {
            "name": "Die cutting machines"
          },
          {
            "name": "Flexo printing machines"
          },
          {
            "name": "Paper lid machines"
          },
          {
            "name": "Paper box machines"
          },
          {
            "name": "Paper coating machines"
          },
          {
            "name": "Insulating cup machines"
          },
          {
            "name": "Paper cutlery machines"
          },
          {
            "name": "Packing machines"
          },
          {
            "name": "Slitting machines"
          },
          {
            "name": "Corrugation machines"
          },
          {
            "name": "Aluminium container machines"
          },
          {
            "name": "Other machines"
          }
        ]
      }
    },
    {
      "category": "homeaboutsection",
      "data": {
        "title": "About US",
        "heading": "Leading the Way in Food Packaging Machine Manufacturing",
        "description": "At Nessco India, we specialize in manufacturing advanced food packaging machines that set industry standards for quality and innovation. Our state-of-the-art technology ensures efficient and sustainable solutions, meeting the diverse needs of our global clientele. With over 40 years of expertise, we are dedicated to pioneering eco-friendly practices in packaging. Trust us to lead the way in transforming packaging solutions for a greener future.",
        "stats": {
          "machinesSold": "5000",
          "readyStockMachines": "250"
        },
        "leftstats": "Machines Sold",
        "rightstats": "Ready Stock Machines",
        "readmore": "Read more",
        "cards": [
          {
            "title": "Vision & Mission",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/mission.webp",
            "link": "vision"
          },
          {
            "title": "Our Strength",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/our-strength.webp",
            "link": "our-strength"
          },
          {
            "title": "People & Culture",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/culture.webp",
            "link": "our-company"
          }
        ]
      }
    },
    {
      "category": "homefeaturedata",
      "data": {
        "title": "Featured Products",
        "description": "Our Top Picks",
        "inquiry": "Added to inquiry",
        "viewMachine": "View Machine",
        "imageWithDescription": [
          {
            "h1": "Paper Cup Machine",
            "link": "paper-cup-machine",
            "h2": "NS-160S",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/feature-product/paper-cup-machine-180.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup.webp",
            "imageInformation": "Paper Plate",
            "information": "NS-160S"
          },
          {
            "h1": "Paper Cup Machine",
            "link": "paper-cup-machine",
            "h2": "NS-160C",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/feature-product/paper-cup-machine-160.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(2).webp\n",
            "imageInformation": "Paper Plate",
            "information": "NS-160C"
          },
          {
            "h1": "Paper Cup Machine",
            "link": "paper-cup-machine",
            "h2": "NS-D3500",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/feature-product/paper-cup-machine-130.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-cup(3).webp",
            "imageInformation": "Paper Plate",
            "information": "NS-D3500"
          },
          {
            "h1": "Paper Bowl Machine",
            "link": "paper-bowl-machine",
            "h2": "NS-160B",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-160b.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp\n",
            "imageInformation": "Paper Plate",
            "information": "NS-160B"
          },
          {
            "h1": "Paper Bowl Machine",
            "link": "paper-bowl-machine",
            "h2": "NS-B3000",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "s",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-b3000.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-bowl.webp\n",
            "imageInformation": "Paper Plate",
            "information": "NS-B3000"
          },
          {
            "h1": "Paper Bowl Machine",
            "link": "paper-bowl-machine",
            "h2": "NS-SB1500",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-sb1500.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-salad-bowl.webp",
            "imageInformation": "Paper Plate",
            "information": "NS-SB1500"
          },
          {
            "h1": "Paper Die Cutting Machine",
            "link": "die-cutting-machine",
            "h2": "NS-970",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-970.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/die-cutting(2).webp\r\n",
            "imageInformation": "Paper Plate",
            "information": "NS-970"
          },
          {
            "h1": "Flexo Printing Machine",
            "link": "flexo-printing-machine",
            "h2": "NS-950",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-950.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/flexo-printing(3).webp",
            "imageInformation": "Paper Plate",
            "information": "NS-950"
          },
          {
            "h1": "Paper Bowl Machine",
            "link": "paper-bowl-machine",
            "h2": "NS-RB500",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-rb500.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/rectangular-flat-bottom.webp",
            "imageInformation": "Paper Plate",
            "information": "NS-RB500"
          },
          {
            "h1": "Paper Box Machine",
            "link": "paper-box-machine",
            "h2": "NS-CRF",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-crf.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/carton-erecting.webp",
            "imageInformation": "Paper Plate",
            "information": "NS-CRF"
          },
          {
            "h1": "Paper Lid Machine",
            "link": "paper-lid-machine",
            "h2": "NS-LID H",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-lid-h.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-lid.webp",
            "imageInformation": "Paper Plate",
            "information": "NS-LID H"
          },
          {
            "h1": "Paper Lid Machine",
            "link": "paper-lid-machine",
            "h2": "NS-LID D",
            "h3": "950mm Roll Width Die Cutting Machine",
            "s": "S",
            "sInformation": "Servo Driven",
            "img": "https://assets.nesscoindustries.com/public/assets/homepage/machine-images/ns-lid-d.webp",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/paper-lid.webp",
            "imageInformation": "Paper Plate",
            "information": "NS-LID D"
          }
        ]
      }
    },
    {
      "category": "BrandsSection",
      "data": {
        "trusted": [
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-1.webp",
            "alt": "mcdonald's"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-2.webp",
            "alt": "wendy's"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-3.webp",
            "alt": "starbucks"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-4.webp",
            "alt": "dominos"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-5.webp",
            "alt": "jollibee"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-6.webp",
            "alt": "kfc"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-7.webp",
            "alt": "burger king"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-8.webp",
            "alt": "pizza hut"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-9.webp",
            "alt": "taco bell"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-10.webp",
            "alt": "chick fila"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-11.webp",
            "alt": "cinnabon"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-12.webp",
            "alt": "dunkin donuts"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-13.webp",
            "alt": "papa john's"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-14.webp",
            "alt": "subway"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/trusted-brands/trusted-brands-logo-15.webp",
            "alt": "maggi"
          }
        ],
        "partners": [
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-1.webp",
            "alt": "Siemens"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-2.webp",
            "alt": "Omron"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-3.webp",
            "alt": "Schnider Electric"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-4.webp",
            "alt": "SMC"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-5.webp",
            "alt": "Delta"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-6.webp",
            "alt": "Autonics"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-7.webp",
            "alt": "tesa"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-8.webp",
            "alt": "Leister"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-9.webp",
            "alt": "Inovance",
            "title1": "Trusted Partners & Brands",
            "title2": "\"Building lasting partnership with trusted brands worldwide\""
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-10.webp",
            "alt": "CITO"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/partner-brands/partner-brands-logo-11.webp",
            "alt": "Mitsubishi"
          }
        ]
      },
      "heading1": "Trusted Brands",
      "heading2": "Partners Brands",
      "description": {
        "heading": "Empowering sustainable packaging",
        "text": "Empowering sustainable packaging with advanced paper-based solutions. Our innovative machines drive global CO2 reduction, paving the way for a greener earth and elevating your packaging capabilities."
      }
    },
    {
      "category": "Our Expertise",
      "data": {
        "knowmore": [
          {
            "title": "Industry Expertise",
            "description": "With over 40 years of industry experience, Nessco India has established a strong reputation for innovation and reliability. Our extensive expertise enables us to provide high-quality, state-of-the-art packaging solutions tailored to meet the unique needs of our clients. We pride ourselves on our proven track record and deep understanding of the industry, ensuring that we consistently deliver exceptional products and services that exceed expectations. Trust Nessco India to be your partner in achieving outstanding packaging results",
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/our-expertise/industry-expertise.webp",
            "link": "https://www.ignant.com/2023/03/25/ad2186-matthias-leidingers-photographic-exploration-of-awe-and-wonder/",
            "color": "#24194c",
            "expertiseExperience": "40+ Years of ",
            "expertiseAbout": "Industry Expertise",
            "icon": "https://assets.nesscoindustries.com/public/assets/Lottiimages/industry_experty.json"
          },
          {
            "title": "Indigenous Design Engineering",
            "description": "At Nessco India, our team specializes in indigenous design engineering, using local knowledge to develop innovative packaging machines. This approach allows us to create custom solutions that meet the specific needs of our customers while ensuring high quality and dependable performance. By designing and building our machines in-house, we maintain complete control over the manufacturing process, which helps us promote sustainability and excellence in every product we deliver. Our commitment to local expertise not only enhances our designs but also supports the community and fosters economic growth.",
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/our-expertise/indigenous-design-engineering.webp",
            "link": "https://www.ignant.com/2022/09/30/clement-chapillon-questions-geographical-and-mental-isolation-with-les-rochers-fauves/",
            "color": "#4e3e8a",
            "expertiseExperience": "40+ Years of ",
            "expertiseAbout": "Industry Expertise",
            "icon": "/assets/Lottiimages/precision-manufacturing.json"
          },
          {
            "title": "Quality Control & Assurance",
            "description": "Quality Control & Assurance is a key part of how we make our products. We have strict quality checks in place to make sure that every machine we produce meets the highest standards for performance and durability. Our goal is to deliver excellent products, and we consistently check that our machines are reliable and efficient, going beyond what the industry expects. This commitment to quality helps us ensure that our customers receive the best possible packaging solutions every time.",
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/our-expertise/quality-control.webp",
            "link": "https://www.ignant.com/2023/10/28/capturing-balis-many-faces-zissou-documents-the-sacred-and-the-mundane-of-a-fragile-island/",
            "color": "#8c52ff",
            "expertiseExperience": "40+ Years of ",
            "expertiseAbout": "Industry Expertise",
            "icon": "/assets/Lottiimages/precision-manufacturing.json"
          },
          {
            "title": "Advanced Engineering Technologies",
            "description": "We use the highest grade tooling, cylindrical grinders, VMC, and CNC machines to build the art of engineering. These advanced technologies ensure precision and excellence in our manufacturing process, allowing us to deliver top-tier packaging machines with unmatched performance and reliability. Trust our state-of-the-art equipment to produce engineering marvels tailored to your needs.",
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/our-expertise/advanced-engineering.webp",
            "link": "https://www.ignant.com/2019/03/13/a-photographic-series-depicting-the-uncertain-future-of-denmarks-treasured-coastlines/",
            "color": "#a58fe8",
            "expertiseExperience": "25+ Years of ",
            "expertiseAbout": "Quality",
            "icon": "/assets/Lottiimages/precision-manufacturing.json"
          }
        ]
      }
    },
    {
      "category": "Featured News",
      "data": {
        "newsData": [
          {
            "title": "Nessco Highlights Sustainability Solutions at Drupa Exhibition",
            "description": "Nessco, the industry-leading paper cup machine manufacturer, recently participated in the prestigious exhibition held at the Düsseldorf Exhibition Center, Düsseldorf, Germany from 28th May to 7th June 2024. This success has confirmed Nessco as the leading maker of disposable paper machines in the industry.",
            "image": "https://assets.nesscoindustries.com/public/assets/resources/media-room/nessco-drupa24.webm",
            "alt": "Nessco Highlights Sustainability Solutions at Drupa Exhibition"
          },
          {
            "title": "Nessco Showcase Sustainability Solutions at Fooma Exhibition",
            "description": "Nessco, the industry-leading paper cup machine manufacturer, recently participated in the prestigious exhibition held at the Japan from 4th June to 7th June 2024.",
            "image": "https://assets.nesscoindustries.com/public/assets/resources/media-room/nessco-fooma-japan-24.webp",
            "alt": "Nessco Showcase Sustainability Solutions at Fooma Exhibition"
          },
          {
            "title": "Nessco Honored in Kuwait for Outstanding Quality and Excellence",
            "description": "Nessco, a leading paper cup machine manufacturer and global provider, has been honored in Kuwait for its strong focus on quality and excellence. This honor shows the company’s ongoing promise to provide the best products and services that meet the industry’s highest standards.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/news/istanbul-turkey-2023-news.webp",
            "alt": "Nessco Honored in Kuwait for Outstanding Quality and Excellence"
          },
          {
            "title": "How Nessco Focus on Sustainability in Their Innovation",
            "description": "Nowadays, sustainability is no longer a choice but a necessity for every business. Now, every business understands they need to use sustainable methods to stay successful over time.",
            "image": "https://assets.nesscoindustries.com/public/assets/homepage/news/saudi-2024-news.webp",
            "alt": "How Nessco Focus on Sustainability in Their Innovation"
          },
          {
            "title": "Nessco Launches Innovative Paper Cup Machine at Drupa Exhibition",
            "description": "As a top provider of sustainable solutions for the HORECA industry, Nessco was excited to introduce its newest Servo Driven Paper Cup Machine at the famous Drupa Exhibition. This new machine set a high standard in the industry with its advanced technology, efficiency, and eco-friendly features.",
            "image": "https://assets.nesscoindustries.com/public/assets/resources/media-room/drup24-nessco-video.webm",
            "alt": "Nessco Launches Innovative Paper Cup Machine at Drupa Exhibition"
          }
        ]
      }
    },
    {
      "data": {
        "testinomial": [
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-1.svg",
            "username": "Alice Johnson",
            "profile": "Software Developer",
            "country": "USA",
            "quote": "Innovate and elevate. Embrace the future with bold ideas.",
            "flag": "https://flagcdn.com/us.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-2.svg",
            "username": "Hiroshi Tanaka",
            "profile": "Eco-Entrepreneur",
            "country": "Japan",
            "quote": "Nessco’s machines are the perfect blend of efficiency and sustainability.",
            "flag": "https://flagcdn.com/jp.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-3.svg",
            "username": " Fatima Khalil",
            "profile": "Environmental Activist",
            "country": "Ghana",
            "quote": "Reliable machines that keep my business running smoothly.",
            "flag": "https://flagcdn.com/gh.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-4.svg",
            "username": "Miguel González",
            "profile": "Packaging Solutions Expert",
            "country": "Mexico",
            "quote": "Redefining packaging with innovative technology.",
            "flag": "https://flagcdn.com/mx.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-5.svg",
            "username": "Zhi Wei Lee",
            "profile": "Product Designer",
            "country": "Singapore",
            "quote": "Nessco helps turn great designs into reality.",
            "flag": "https://flagcdn.com/sg.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-6.svg",
            "username": "Omar Al-Farsi",
            "profile": "Business Consultant",
            "country": "UAE",
            "quote": "Investing in Nessco was a decision that paid off immensely.",
            "flag": "https://flagcdn.com/ae.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-7.svg",
            "username": "Elena Petrov",
            "profile": "Sustainability Advocate",
            "country": "Russia",
            "quote": "The future of disposables lies in eco-friendly solutions like Nessco’s.",
            "flag": "https://flagcdn.com/ru.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-akshat.svg",
            "username": "Akshat",
            "profile": "C.E.O",
            "country": "India",
            "quote": "Seamless performance, unmatched quality Nessco delivers every time.",
            "flag": "https://flagcdn.com/in.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-avdesh.svg",
            "username": "Avdesh",
            "profile": "Director",
            "country": "India",
            "quote": "Nessco’s machines are the backbone of our eco-friendly operations.",
            "flag": "https://flagcdn.com/in.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-bhavesh.svg",
            "username": "Bhavesh",
            "profile": "Founder",
            "country": "India",
            "quote": "Nessco’s machines are truly a game-changer for my business.",
            "flag": "https://flagcdn.com/in.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-manish.svg",
            "username": "Manish",
            "profile": "Owner",
            "country": "India",
            "quote": "Nessco delivers reliability and excellence at every step.",
            "flag": "https://flagcdn.com/in.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-12.svg",
            "username": "Liam O'Connor",
            "profile": "C.E.O",
            "country": "Ireland",
            "quote": "Nessco's machines make our success simple.",
            "flag": "https://flagcdn.com/ie.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-13.svg",
            "username": "Amara Nkrumah",
            "profile": "Owner",
            "country": "Singapore",
            "quote": "Nessco sets a new standard we’re proud to follow.",
            "flag": "https://flagcdn.com/eg.svg"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/testimonials-profile-14.svg",
            "username": "Wang Min",
            "profile": "Industrial Engineer",
            "country": "China",
            "quote": "Nessco's precision sets a new standard for us",
            "flag": "https://flagcdn.com/cn.svg"
          }
        ],
        "Testinomialvideos": [
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/video1.webm",
            "youtubeLink": "https://www.youtube.com/embed/UxPkK8gW0hs?rel=0"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/video2.webm",
            "youtubeLink": "https://www.youtube.com/embed/UxPkK8gW0hs?rel=0"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/video3.MOV",
            "youtubeLink": "https://www.youtube.com/embed/UxPkK8gW0hs?rel=0"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/video4.webm",
            "youtubeLink": "https://www.youtube.com/embed/UxPkK8gW0hs?rel=0"
          },
          {
            "src": "https://assets.nesscoindustries.com/public/assets/homepage/testimonials/video5.webm",
            "youtubeLink": "https://www.youtube.com/embed/UxPkK8gW0hs?rel=0"
          }
        ],
        "heading": "Testimonials",
        "subheading": "Hear It Straight From Our Clients",
        "thirdsubheading": "Satisfied Customers",
        "description": "Words That Matter the Most"
      }
    },
    {
      "category": "Announcement",
      "data": [
        {
          "description": "Join us at Printing Technologies Expo,\nHall 13/A106 & Hall 9/D02,\nMay 28 to June 7, 2024.",
          "title": "Drupa Germany.",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/drupa-icon.webp"
        },
        {
          "description": "Join us at the world's leading food processing and machinery expo:\nBooth 7C-13, June 4-7, 2024\n",
          "title": "Fooma Japan 24",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/fooma-japan-icon.webp"
        },
        {
          "description": "Experienced interactive sessions and discussed about sustainable packaging solutions.\n",
          "title": "Paper One Show",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/paperone-show-icon.webp"
        },
        {
          "description": "Build connections and spread awareness of various opportunities in paper.\n",
          "title": "PLASTINDIA",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/plastindia-icon.webp"
        },
        {
          "description": "Had a great time connecting with industry people in Gulfood 2022 .",
          "title": "Gulfood 2022",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/gulfood-icon.webp"
        },
        {
          "description": "Build connections and spread awareness of various opportunities in paper.\n",
          "title": "Saudi Print & Pack",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/saudi-print-icon.webp"
        },
        {
          "description": "Build connections and spread awareness of various opportunities in paper.\n",
          "title": "Interpack",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/interpack-icon.webp"
        },
        {
          "description": "\nGlad to visit the World's No. 1 Trade Fair for Plastics and Rubber.\n",
          "title": "K-Show",
          "src": "https://assets.nesscoindustries.com/public/assets/homepage/announcements/k-show-icon.webp"
        }
      ]
    },
    {
      "category": "IOTdata",
      "data": {
        "title": "IOT Systems",
        "machineImg": "https://assets.nesscoindustries.com/public/assets/homepage/iot/iot-home-2.webp",
        "desktopImg": "https://assets.nesscoindustries.com/public/assets/homepage/iot/iot-home-1.webp",
        "globeVideo": "https://assets.nesscoindustries.com/public/assets/homepage/iot/iot-video3.webm",
        "subTitle": "INDUSTRY 4.0",
        "cards": [
          {
            "title": "Smart Connected Machines",
            "description": "Our machines are equipped with Wi-Fi and optional connectivity methods for seamless communication. They can interact with other machines & systems, enabling synchronized operations.",
            "video": "https://assets.nesscoindustries.com/public/assets/homepage/iot/iot-video4.webm"
          },
          {
            "title": "Remote Connectivity",
            "description": "Our machines feature inbuilt sensors and actuators controlled via advanced PLC systems. With the Nessco Web App, inputs can be adjusted and operations managed remotely from anywhere in the world, ensuring flexibility and convenience.",
            "video": "https://assets.nesscoindustries.com/public/assets/homepage/iot/iot-video4.webm"
          },
          {
            "title": "Realtime Dashboards",
            "description": "Track production and machine performance in real-time with comprehensive efficiency reports. Access historic data on an hourly, shift-wise, daily, monthly, or yearly basis—all with a single click using the Nessco Web App.",
            "video": "https://assets.nesscoindustries.com/public/assets/homepage/iot/iot-video4.webm"
          },
          {
            "title": "Program & Maintenance",
            "description": "Update machine programs remotely from anywhere in the world. Manage preventive maintenance schedules, reduce downtime, and identify root causes of issues instantly using the advanced machine program features.",
            "video": "https://assets.nesscoindustries.com/public/assets/homepage/iot/iot-video4.webm"
          }
        ]
      }
    }
  ]
}","status":200,"url":"https://jsondatafromhostingertosheet.nesscoindustries.com/en/hero.json"},"revalidate":60,"tags":[]}